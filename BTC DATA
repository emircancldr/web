COİN DATA WEBSİTE

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kripto Fiyatları</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        img { vertical-align: middle; margin-right: 5px; }
        .btn { margin: 2px; }
    </style>
</head>
<body>
    <h1>Güncel Kripto Para Fiyatları</h1>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>#</th>
                <th>Name</th>
                <th>Symbol</th>
                <th>Image</th>
                <th>Price (USD)</th>
                <th>24h High</th>
                <th>24h Low</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody id="crypto_table">
            </tbody>
    </table>

    <script src="script.js"></script>
    </body>
</html>

<script>
// Function to fetch and display crypto data using async/await
async function fetchCryptoData() {
    const API_URL = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd";
    const tableBody = document.getElementById("crypto_table");

    try {
        // 1. Fetch the data - await until the response is received
        const response = await fetch(API_URL);

        // 2. Check if the response was successful (status code 200-299)
        if (!response.ok) {
            // If not successful, throw an error to be caught by the catch block
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        // 3. Parse the JSON data - await until JSON parsing is complete
        const data = await response.json();

        // Clear existing table rows if any (useful for re-fetching)
        tableBody.innerHTML = ''; 

        // 4. Iterate over the data and populate the table
        for (let i = 0; i < data.length; i++) {
            let coin = data[i];

            let row = document.createElement("tr");

            let idCell = document.createElement("td");
            idCell.textContent = i + 1; // Use textContent for text
            idCell.style.fontWeight = "bold"; // Use .style for CSS in Vanilla JS

            let nameCell = document.createElement("td");
            nameCell.textContent = coin.name;
            nameCell.style.fontStyle = "italic";

            let symbolCell = document.createElement("td");
            symbolCell.textContent = coin.symbol.toUpperCase();

            let imageCell = document.createElement("td");
            let img = document.createElement("img");
            img.src = coin.image;
            img.alt = coin.name;
            img.width = 50;
            imageCell.append(img);

            let priceCell = document.createElement("td");
            priceCell.textContent = "$" + coin.current_price;
            priceCell.style.textDecoration = "underline";
            priceCell.style.color = "blue";

            let highCell = document.createElement("td");
            highCell.textContent = "$" + coin.high_24h;
            highCell.style.color = "green";

            let lowCell = document.createElement("td");
            lowCell.textContent = "$" + coin.low_24h;
            lowCell.style.color = "red";

            let tdbuy = document.createElement("td");
            let btnbuy = document.createElement("button");
            btnbuy.classList.add("btn", "btn-success"); // Use classList.add for multiple classes
            btnbuy.textContent = "Buy";
            btnbuy.addEventListener("click", function() {
                window.open("https://kripto.btcturk.com/pro/al-sat/BTC_TRY", "_blank");
            });
            tdbuy.append(btnbuy);

            let tdsell = document.createElement("td");
            let btnsell = document.createElement("button");
            btnsell.classList.add("btn", "btn-danger");
            btnsell.textContent = "Sell";
            tdsell.append(btnsell);

            // Append all cells to the row
            row.append(idCell, nameCell, symbolCell, imageCell, priceCell, highCell, lowCell, tdbuy, tdsell);

            // Append the row to the table body
            tableBody.append(row);
        }

    } catch (error) {
        // Handle any errors that occurred during the fetch or parsing
        console.error("Kripto verilerini Ã§ekerken hata oluÅŸtu:", error);
        tableBody.innerHTML = '<tr><td colspan="9">Veriler yÃ¼klenirken bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.</td></tr>';
    }
}

// Call the async function to fetch data when the script loads
fetchCryptoData();
</script>
